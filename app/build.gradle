import java.text.SimpleDateFormat

apply plugin: 'com.android.application'

static def timestamp(boolean time) {
    def dateFormat = new SimpleDateFormat(time ? "HHmm" : "yyyy-MM-dd")
    dateFormat.setTimeZone(TimeZone.getTimeZone("UTC"))
    return dateFormat.format(new Date())
}

def idForSimon() {
    try {
        def commit = new ByteArrayOutputStream()
        exec {
            // Require remote called simon because someone downstream might call my branch "upstream"
            commandLine 'git', 'merge-base', 'simon/main', 'main'
            standardOutput = commit
        }
        def shortUnique = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'rev-parse', '--short', commit.toString().trim()
            standardOutput = shortUnique
        }
        return shortUnique.toString().trim()
    } catch (ignored) {
        return "UNOFFICIAL"
    }
}

def issuesURL() {
    def gitRemote = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'ls-remote', '--get-url', 'origin'
        standardOutput = gitRemote
    }
    return gitRemote.toString().trim().replaceFirst("\\.git\$", "") + "/issues"
}

android {
    compileSdkVersion 32
    defaultConfig {
        targetSdkVersion 32
        minSdkVersion 19
        applicationId "name.boyle.chris.sgtpuzzles"
        versionCode 122
        versionName timestamp(false)
        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
        resValue "string", "issues_url", issuesURL()

        fileTree(dir: 'src/main/jni', include: '*.c').each { File f ->
            def game = f.name.replace(".c", "")
            def text = f.text
            def match = text =~ /enum\s+\{\s*COL_[^,]+,\s*(COL_[^}]+)}/
            if (match) {
                def colours = match.group(1).replaceAll(/(?s)\/\*.*?\*\//, "").replaceAll(/#[^\n]*\n/, "")
                        .trim().split(",")*.trim()*.replaceFirst(/^COL_/, "")*.toLowerCase()
                        .findAll { it =~ /^[^=]+$/ } - ["ncolours", "crossedline"]
                if (colours.any { it =~ /[^a-z0-9_]/ }) {
                    throw new Exception("Couldn't parse colours for " + game + ": " + match.group(1) + " -> " + colours)
                }
                resValue "string", game + "_colours", colours.join(',')
            }
        }
    }
    externalNativeBuild {
        cmake {
            path "src/main/jni/CMakeLists.txt"
        }
    }
    buildTypes {
        debug {
            versionNameSuffix "-DEBUG-${idForSimon()}"
            ndk {
                debuggable true
            }
        }
        release {
            versionNameSuffix "-${timestamp(true)}-${idForSimon()}"
            minifyEnabled true
            ndk {
                debuggable false
            }
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    packagingOptions {
        jniLibs {
            useLegacyPackaging = true
        }
    }
}

// Generate a Java enum of games: really this should use some CMake output instead of the regex
// hack, but the Android Gradle Plugin wants to compile the Java before running any of the CMake
project.extensions.findByName("android").applicationVariants.all { variant ->
    def sourceDir = new File(project.getBuildDir(), "generated/backendsEnum/${variant.name}")
    def myTask = tasks.register("generate${variant.name.capitalize()}BackendsEnum") {
        it.inputs.file('src/main/jni/CMakeLists.txt')
        it.outputs.dir(sourceDir)
        it.doLast {
            def pairs = it.inputs.files.singleFile.text.findAll(~/puzzle\(\s*(\w+)\s+DISPLAYNAME\s+"([^"]+)"/) { m, puz, display -> [puz.toUpperCase(), display] }
            def out = new File("${it.outputs.files.singleFile}/name/boyle/chris/sgtpuzzles/BackendName.java")
            out.parentFile.mkdirs()
            out.delete()
            out.text = """package name.boyle.chris.sgtpuzzles;
                    |import java.util.Collections;
                    |import java.util.LinkedHashMap;
                    |import java.util.Map;
                    |import androidx.annotation.NonNull;
                    |import androidx.annotation.Nullable;
                    |
                    |/** Names of all the backends. Automatically generated file, do not modify. */
                    |public enum BackendName {
                    |    ${pairs.collect {"${it[0]}(\"${it[1]}\")"}.join(", ")};
                    |    private final String _displayName;
                    |    private BackendName(final String displayName) { _displayName = displayName; }
                    |    @NonNull public String getDisplayName() { return _displayName; }
                    |    @NonNull public String toString() { return name().toLowerCase(); }
                    |    private static final Map<String, BackendName> BY_DISPLAY_NAME, BY_LOWERCASE;
                    |    static {
                    |        final Map<String, BackendName> byDisp = new LinkedHashMap<String, BackendName>(), byLower = new LinkedHashMap<String, BackendName>();
                    |        for (final BackendName bn : values()) { byDisp.put(bn.getDisplayName(), bn); byLower.put(bn.toString(), bn); }  // no streams until API 24
                    |        BY_DISPLAY_NAME = Collections.unmodifiableMap(byDisp);
                    |        BY_LOWERCASE = Collections.unmodifiableMap(byLower);
                    |    }
                    |    @UsedByJNI @Nullable public static BackendName byDisplayName(final String displayName) {
                    |        return BY_DISPLAY_NAME.get(displayName);
                    |    }
                    |    @UsedByJNI @Nullable public static BackendName byLowerCase(final String lowerCase) {
                    |        return BY_LOWERCASE.get(lowerCase);
                    |    }
                    |};
                    |""".stripMargin()
        }
    }
    variant.registerJavaGeneratingTask(myTask, sourceDir)
}

dependencies {
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'androidx.appcompat:appcompat:1.4.1'
    implementation 'androidx.gridlayout:gridlayout:1.0.0'
    implementation 'androidx.annotation:annotation:1.3.0'
    implementation 'androidx.preference:preference:1.2.0'
    testImplementation 'junit:junit:4.12'
    testImplementation 'org.mockito:mockito-core:1.10.19'
    androidTestImplementation 'androidx.annotation:annotation:1.3.0'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test:rules:1.4.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
}
