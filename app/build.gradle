import java.text.SimpleDateFormat

apply plugin: 'com.android.application'

static def timestamp() {
    def dateFormat = new SimpleDateFormat("yyyy-MM-dd-HHmm")
    dateFormat.setTimeZone(TimeZone.getTimeZone("UTC"))
    return dateFormat.format(new Date())
}

def idForSimon() {
    try {
        def commit = new ByteArrayOutputStream()
        exec {
            // Require remote called simon because someone downstream might call my branch "upstream"
            commandLine 'git', 'merge-base', 'simon/main', 'main'
            standardOutput = commit
        }
        def shortUnique = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'rev-parse', '--short', commit.toString().trim()
            standardOutput = shortUnique
        }
        return shortUnique.toString().trim()
    } catch (ignored) {
        return "UNOFFICIAL"
    }
}

def issuesURL() {
    def gitRemote = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'ls-remote', '--get-url', 'origin'
        standardOutput = gitRemote
    }
    return gitRemote.toString().trim().replaceFirst("\\.git\$", "") + "/issues"
}

android {
    compileSdkVersion 32
    defaultConfig {
        targetSdkVersion 32
        minSdkVersion 19
        applicationId "name.boyle.chris.sgtpuzzles"
        versionCode 120
        versionName "${timestamp()}-${idForSimon()}"
        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
        resValue "string", "issues_url", issuesURL()

        fileTree(dir: 'src/main/jni', include: '*.c').each { File f ->
            def game = f.name.replace(".c", "")
            def text = f.text
            def match = text =~ /enum\s+\{\s*COL_[^,]+,\s*(COL_[^}]+)}/
            if (match) {
                def colours = match.group(1).replaceAll(/(?s)\/\*.*?\*\//, "").replaceAll(/#[^\n]*\n/, "")
                        .trim().split(",")*.trim()*.replaceFirst(/^COL_/, "")*.toLowerCase()
                        .findAll { it =~ /^[^=]+$/ } - ["ncolours", "crossedline"]
                if (colours.any { it =~ /[^a-z0-9_]/ }) {
                    throw new Exception("Couldn't parse colours for " + game + ": " + match.group(1) + " -> " + colours)
                }
                resValue "string", game + "_colours", colours.join(',')
            }
        }
    }
    externalNativeBuild {
        cmake {
            path "src/main/jni/CMakeLists.txt"
        }
    }
    buildTypes {
        debug {
            ndk {
                debuggable true
            }
        }
        release {
            minifyEnabled true
            ndk {
                debuggable false
            }
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    packagingOptions {
        jniLibs {
            useLegacyPackaging = true
        }
    }
}

dependencies {
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'androidx.appcompat:appcompat:1.4.1'
    implementation 'androidx.gridlayout:gridlayout:1.0.0'
    implementation 'androidx.annotation:annotation:1.3.0'
    testImplementation 'junit:junit:4.12'
    testImplementation 'org.mockito:mockito-core:1.10.19'
    androidTestImplementation 'androidx.annotation:annotation:1.3.0'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test:rules:1.4.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
}
